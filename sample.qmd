---
title: "Demographics"
---

<!-- Setup -->

```{r}
source('setup.R')
```

`r nrow(survey_results)` respondents finished the survey, broken out by role and affiliation below:

::: {.panel-tabset}

### Role

```{r}
plotly_treemap_role_df <- survey_results |>
  group_by(type = QID4, division = QID8) |>
  summarise(n = n()) |>
  mutate(
    type = ifelse(is.na(type), 'Unaffiliated', type),
    division = ifelse(is.na(division), 'Unaffiliated', division)
  )

plotly_treemap_role_df <- plotly_treemap_role_df |>
  bind_rows(
    survey_results |>
      group_by(division = QID4) |>
      summarise(n = n()) |>
      mutate(
        division = ifelse(is.na(division), 'Unaffiliated', division)
      )
  ) |>
  mutate(ids = ifelse(is.na(type), division, paste0(type, "_", division))) |>
  select(ids, everything()) |>
  mutate(
    ids = ifelse(is.na(ids), "", ids),
    division = ifelse(is.na(division), type, division),
    type = ifelse(is.na(type), "", type),
    n = as.double(n)
  )

plot_ly(type = "treemap",
        data = plotly_treemap_role_df,
        labels = ~division,
        parents = ~type,
        ids = ~ids,
        values = ~n,
        hoverinfo = "text",
        hovertemplate = "<b>%{parent}</b><br>Type: %{label}<br>Responses: %{value}<extra></extra>",
        textposition = "inside", # insidetextanchor = "middle",
        textfont = list(size = 14),
        branchvalues = "total"
        ) |>
  layout(title = "Survey Respondents",
         plot_bgcolor  = background_color,
         paper_bgcolor = background_color)
```

### Affiliation

```{r}
plotly_treemap_affiliation_df <- survey_results |>
  group_by(type = QID4, division = QID8) |>
  summarise(n = n()) |>
  mutate(
    type = ifelse(is.na(type), 'Unaffiliated', type),
    division = ifelse(is.na(division), 'Unaffiliated', division)
  )

plotly_treemap_affiliation_df <- plotly_treemap_affiliation_df |>
  bind_rows(
    survey_results |>
      group_by(type = QID8) |>
      summarise(n = n()) |>
      mutate(
        type = ifelse(is.na(type), 'Unaffiliated', type)
      )
  ) |>
  mutate(ids = ifelse(is.na(division), type, paste0(division, "_", type))) |>
  select(ids, everything()) |>
  mutate(
    ids = ifelse(is.na(ids), "", ids),
    division = ifelse(is.na(division), "", division),
    type = ifelse(is.na(type), "", type),
    n = as.double(n)
  )

plot_ly(type = "treemap",
        data = plotly_treemap_affiliation_df,
        labels = ~type,
        parents = ~division,
        ids = ~ids,
        values = ~n,
        hoverinfo = "text",
        hovertemplate = "<b>%{parent}</b><br>Type: %{label}<br>Responses: %{value}<extra></extra>",
        textposition = "inside", insidetextanchor = "middle",
        textfont = list(size = 14),
        branchvalues = "total"
        ) |>
  layout(title = "Survey Respondents",
         plot_bgcolor  = background_color,
         paper_bgcolor = background_color)
```

:::

<b>`r round((sum(survey_results$QID22 == 'Yes', na.rm = TRUE) / nrow(survey_results) * 100))`%</b> of respondents said they have contributed to open source projects, either academically or personally.

```{r}
c1_df <- survey_results |>
  mutate(QID4 = ifelse(is.na(QID4), 'Unafilliated', QID4)) |>
  rename(`Respondent Type` = QID4) |>
  group_by(QID22, `Respondent Type`) |>
  summarise(Count = n(),
            Percent = n() / nrow(survey_results))

c1_df |>
  plot_ly(
    x = ~ QID22,
    y = ~ Percent,
    color = ~ `Respondent Type`,
    colors = viridis_pal(option = "D")(length(c1_df$`Respondent Type`))
  ) |>
  add_bars() |>
  layout(
    barmode = 'stack',
    plot_bgcolor = background_color,
    paper_bgcolor = background_color,
    xaxis = list(title = 'Have contributed to open source projects?'),
    yaxis = list(
      zerolinecolor = '#ffff',
      zerolinewidth = 2,
      gridcolor = 'ffff',
      tickformat = ".1%"
    )
  )
```

### Faculty and Staff

Of these respondents, `r nrow(survey_results[survey_results$QID4 == 'Faculty'|survey_results$QID4 == 'Staff',])` identified as faculty or staff (`r round(nrow(survey_results[survey_results$QID4 == 'Faculty'|survey_results$QID4 == 'Staff',]) / nrow(survey_results), 2) * 100`% of respondents).

Faculty and staff respondents were distributed in tenure (years served) at the university as below:

```{r}
tenure_gg <- survey_results |>
  mutate(
    QID6 = ifelse(is.na(QID6) | QID6 == "", "No Response", QID6),
    QID6 = factor(QID6, levels = c("No Response", "0-1 years", "2-3 years", "4-6 years", "7-10 years", "10+ years"))
  ) |>
  filter(QID4 %in% c('Faculty', 'Staff')) |>
  ggplot(aes(x = QID6)) +
  geom_bar(fill = primary_color) +
  labs(x = 'Years Served', y = 'Respondents') +
  facet_wrap(vars(QID4), nrow = 1)

ggplotly(tenure_gg, tooltip = 'count')
```


### Students

`r nrow(survey_results[survey_results$QID4 == 'Graduate Student'|survey_results$QID4 == 'Undergraduate Student',])` respondents identified as students (`r round(nrow(survey_results[survey_results$QID4 == 'Graduate Student'|survey_results$QID4 == 'Undergraduate Student',]) / nrow(survey_results), 2) * 100`% of respondents). Students came from degree programs in the following subjects:


```{r}
major_stacked <- survey_results |>
  filter(QID4 %in% c('Graduate Student', 'Undergraduate Student')) |>
  mutate(
    QID4 = ifelse(QID4 == 'Graduate Student', 'Graduate', 'Undergraduate'),
    QID7 = str_to_title(QID7),
    #QID7 = str_replace_all(QID7, '&', 'And'),
    #QID7 = str_remove_all(QID7, ' Phd'),
    QID7 = str_trim(QID7)
  ) |>
  # Manually clean up some majors
  mutate(
    QID7 = case_when(

      QID7 == "" ~ "Not Provided",
      QID7 == "Bio" ~ "Biology",
      QID7 == "Cognitive A Neuroscience" ~ "Other",
      QID7 == "Computer Engineering" ~ "Computer Science",
      QID7 == "Crim" ~ "Other",
      QID7 == "Cybersecurity Analytics" ~ "Cybersecurity",
      QID7 == "D.engineering In Cybersecurity Analytics" ~ "Cybersecurity",
      QID7 == "Double Major In History And Marketing With A Minor In Accounting." ~ "History",
      QID7 == "Econ And American Studies" ~ "Economics",
      QID7 == "Economics And Finance" ~ "Economics",
      QID7 == "Engineerig" ~ "Engineering",

      QID7 == "Geography And Internarional Affairs" ~ "International Affairs",
      QID7 == "Ia" ~ "International Affairs",
      QID7 == "Marketing And History" ~ "Business",
      QID7 == "Political Science And Criminal Justice" ~ "Political Science",
      QID7 == "Political Science And Finance" ~ "Political Science",
      QID7 == "Political Science And Religion" ~ "Political Science",
      QID7 == "Poli Sci" ~ "Political Science",
      QID7 == "Policsci" ~ "Political Science",
      QID7 == "Polisci And Bio" ~ "Political Science",
      QID7 == "Psychology And Data Science" ~ "Psychology",
      QID7 == "Journalism And Economics" ~ "Economics",
      QID7 == "Human Service & Social Justice, Peace Studies" ~ "Other",

      QID7 == "Art History" ~ "Other",
      QID7 == "Business Analytics" ~ "Business",
      QID7 == "Chemistry" ~ "Other",
      QID7 == "Criminal Justice" ~ "Other",
      QID7 == "Electrical Engineering" ~ "Engineering",
      QID7 == "Environmental Science" ~ "Other",
      QID7 == "Human Paleobiology" ~ "Other",
      QID7 == "Management" ~ "Business",
      QID7 == "Medicine" ~ "Other",
      QID7 == "Museum Studies" ~ "Other",
      QID7 == "Organizational Sciences" ~ "Other",
      QID7 == "Nutrition" ~ "Other",
      QID7 == "Physics" ~ "Other",
      QID7 == "Political Communications" ~ "Other",
      QID7 == "Public Policy" ~ "Other",
      QID7 == "Systems Engineering" ~ "Engineering",
      QID7 == "Undecided" ~ "Other",

      is.na(QID7) ~ "Not Provided",
      TRUE ~ QID7
    )
  ) |>
  # Calculate total respondents per major
  group_by(QID7) |>
  mutate(total = n()) |>
  ungroup() |>
  # Reorder QID7 by descending total count
  mutate(QID7 = fct_reorder(QID7, total, .desc = FALSE))

# Create stacked horizontal bar chart
major_stacked_plot <- ggplot(major_stacked, aes(x = QID7, fill = QID4)) +
  geom_bar() +
  scale_fill_manual(values = c("Undergraduate" = "#063244", "Graduate" = "#908065")) +
  coord_flip() +  # horizontal bars
  labs(
    y = 'Respondents',
    x = 'Major',
    fill = 'Student Type'
  ) +
  bar_coord_flip_theme

# Convert ggplot to interactive Plotly chart
ggplotly(major_stacked_plot, tooltip = 'count')
```
